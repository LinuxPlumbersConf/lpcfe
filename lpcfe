#!/usr/bin/python3
#
import quixote
quixote.enable_ptl()
from quixote.publish import Publisher
from wsgiref.simple_server import make_server, WSGIServer
from socketserver import ThreadingMixIn
import argparse, threading, time
import frontend, auth, bbb, indico, config, timetable

def load_configs():
    cdir = options.config
    config.load_config(cdir)
    auth.setup()
    bbb.load_config(cdir)
    indico.load_timetable()
    timetable.load_track_colors(cdir)

#
# A simple thread function to occasionally reload the timetable.
#
UpdatePeriod = 600 # ten minutes
def UpdateThread():
    while True:
        time.sleep(UpdatePeriod)
        indico.load_timetable()
#
# Our publisher class.  Much of what's here is dedicated to managing
# the request object, which quixote stores globally - bad for threading.
#
class wsgi_pub(Publisher):
    is_thread_safe = True

    def __init__(self, *args, **kwargs):
        Publisher.__init__(self, frontend.frontend())
        self.requests = { }

    def _set_request(self, request):
        self.requests[threading.get_ident()] = request

    def clear_request(self):
        try:
            del self.requests[threading.get_ident()]
        except KeyError:
            pass

    def get_request(self):
        return self.requests[threading.get_ident()]

# https://gist.github.com/coffeesnake/3093598
class ThreadingServer(ThreadingMixIn, WSGIServer):
    pass

parser = argparse.ArgumentParser()
parser.add_argument('-c', '--config', dest = 'config', default = '.')
parser.add_argument('-p', '--port', dest = 'port', default = 8080, type = int)
options = parser.parse_args()

load_configs()
updater = threading.Thread(target = UpdateThread, daemon = True)
updater.start()

try:
    pub = wsgi_pub()
    wsgi_app = quixote.get_wsgi_app() # Magically tied to pub
    make_server('localhost', options.port, wsgi_app, ThreadingServer).serve_forever()
except KeyboardInterrupt:
    import sys
    sys.exit(0)
